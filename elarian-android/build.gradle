
apply plugin: 'maven'
apply plugin: 'com.android.library'
apply plugin: 'signing'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

group properties.getProperty("maven.groupId")
version properties.getProperty("maven.version")

String protobufVersion = "3.15.5"

android {
    compileSdkVersion 30
    defaultConfig {
        consumerProguardFiles "proguard-rules.txt"
        minSdkVersion 27
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    lintOptions { abortOnError false }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude "META-INF/INDEX.LIST"
        exclude "META-INF/io.netty.versions.properties"
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    compile "com.google.protobuf:protobuf-javalite:$protobufVersion"
    compile(project(':elarian-common'))
}


task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    failOnError = false
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar, sourcesJar
}

task findConventions {
    doLast {
        println project.getConvention()
    }
}

signing {
    sign configurations.archives
}

afterEvaluate {
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: findProperty('ossrhUsername'), password: findProperty('ossrhPassword'))
                }

                snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: findProperty('ossrhUsername'), password: findProperty('ossrhPassword'))
                }

                pom.project {
                    name 'Elarian'
                    packaging 'jar'
                    description 'Elarian is a customer engagement runtime that let\'s you code against customer data allowing you to track, schedule, execute and analyze engagement actions from a customer POV.'
                    url 'https://developers.elarian.com'

                    scm {
                        connection 'scm:git:git@github.com:ElarianLtd/java-sdk.git'
                        developerConnection 'scm:git:https://github.com:ElarianLtd/java-sdk'
                        url 'https://github.com/ElarianLtd/java-sdk'
                    }

                    licenses {
                        license {
                            name 'MIT'
                            url 'https://raw.githubusercontent.com/ElarianLtd/java-sdk/master/LICENSE'
                        }
                    }

                    developers {
                        developer {
                            id 'salama'
                            name 'Salama Balekage'
                            email 'salama@elarian.com'
                        }
                    }
                }

                pom.withXml {
                    asNode().dependencies.dependency.each { dep ->
                        if(dep.artifactId.last().value().last() in ["elarian-common"]) {
                            assert dep.parent().remove(dep)
                        }
                    }
                }
            }
        }
    }
}
