Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

group properties.getProperty("bintray.groupId")
version properties.getProperty("bintray.version")

apply plugin: 'java'
apply plugin: "maven-publish"
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
    compile(project(':elarian-common'))
    implementation(project(':elarian-hera'))
    testImplementation(platform('org.junit:junit-bom:5.7.1'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation('org.awaitility:awaitility:4.0.3')
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}


jar {
    manifest {
        attributes 'Implementation-Title': 'Elarian SDK',
                'Implementation-Version': version
    }
}

def exportedProjects = [
    ":elarian-common",
    ":elarian-core",
]

task javadoc(overwrite: true, type: Javadoc) {
    destinationDir = new File("${project.rootDir}/docs")
    source exportedProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
    title = "Elarian Java SDK"
    options {
        links "http://docs.oracle.com/javase/8/docs/api/"
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

shadowJar {
    classifier = null // Avoid classifiers for now...
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        SDK(MavenPublication) {
            artifact shadowJar
            groupId properties.getProperty("bintray.groupId")
            artifactId project.name
            version project.version
        }
    }
}

bintray {
    dryRun = false
    publish = true
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.key")
    publications = ['SDK']
    pkg {
        repo = properties.getProperty("bintray.repo")
        name = properties.getProperty("bintray.package")
        userOrg = properties.getProperty("bintray.organization")
        vcsUrl = properties.getProperty("bintray.vcsUrl")
        licenses = ['MIT']
        version {
            name = project.version
            desc = 'Official Elarian SDK'
            released  = new Date()
            attributes = ['maturity': 'Official']
        }
    }
}