Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

group properties.getProperty("maven.groupId")
version properties.getProperty("maven.version")

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.adarshr.test-logger'

dependencies {
    compile(project(':elarian-common'))
    implementation(project(':elarian-hera'))
    testImplementation(platform('org.junit:junit-bom:5.7.1'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation('org.awaitility:awaitility:4.0.3')
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()

    testlogger {
        theme 'mocha'
        slowThreshold 5000
        showSimpleNames true
        showExceptions true
        showStackTraces true
        showFullStackTraces true
        showCauses true
        logLevel 'info'
        showStandardStreams true
    }

    environment 'APP_ID', properties.getProperty('APP_ID')
    environment 'ORG_ID', properties.getProperty('ORG_ID')
    environment 'API_KEY', properties.getProperty('API_KEY')
    environment 'PURSE_ID', properties.getProperty('PURSE_ID')
    environment 'USSD_CODE', properties.getProperty('USSD_CODE')
    environment 'VOICE_NUMBER', properties.getProperty('VOICE_NUMBER')
    environment 'SMS_SENDER_ID', properties.getProperty('SMS_SENDER_ID')
    environment 'MPESA_PAYBILL', properties.getProperty('MPESA_PAYBILL')
    environment 'SMS_SHORT_CODE', properties.getProperty('SMS_SHORT_CODE')
    environment 'TELEGRAM_NUMBER', properties.getProperty('TELEGRAM_NUMBER')
    environment 'WHATSAPP_NUMBER', properties.getProperty('WHATSAPP_NUMBER')
    environment 'MESSENNGER_NUMBER', properties.getProperty('MESSENNGER_NUMBER')
}


jar {
    manifest {
        attributes 'Implementation-Title': 'Elarian SDK',
                'Implementation-Version': version
    }
}

def exportedProjects = [
    ":elarian-common",
    ":elarian-core",
]

task javadoc(overwrite: true, type: Javadoc) {
    destinationDir = new File("${project.rootDir}/docs")
    source exportedProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
    title = "Elarian Java SDK"
    options {
        links "http://docs.oracle.com/javase/8/docs/api/"
        addBooleanOption('html5', true)
    }
}

shadowJar {
    classifier = null // Avoid classifiers for now...
}

publishing {
    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? properties.getProperty("maven.repo.snapshots") : properties.getProperty("maven.repo.releases")
            authentication {
                basic(BasicAuthentication)
            }
            credentials {
                username = properties.getProperty("maven.repo.username")
                password = properties.getProperty("maven.repo.password")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifact javadocJar
            artifact sourcesJar
            artifact shadowJar
            pom {
                name = 'Elarian'
                packaging = 'jar'
                description = 'Elarian is a customer engagement runtime that let\'s you code against customer data allowing you to track, schedule, execute and analyze engagement actions from a customer POV.'
                url = 'https://developers.elarian.com'

                scm {
                    connection = 'scm:git:git@github.com:ElarianLtd/java-sdk.git'
                    developerConnection = 'scm:git:https://github.com:ElarianLtd/java-sdk'
                    url = 'https://github.com/ElarianLtd/java-sdk'
                }

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://raw.githubusercontent.com/ElarianLtd/java-sdk/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'salama'
                        name = 'Salama Balekage'
                        email = 'salama@elarian.com'
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}